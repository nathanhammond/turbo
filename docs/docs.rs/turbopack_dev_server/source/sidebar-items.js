window.SIDEBAR_ITEMS = {"enum":[["ContentSourceContent","The content of a result that is returned by a content source."],["ContentSourceDataFilter","Filter function that describes which information is required."],["HeaderValue","The value of an http header. HTTP headers might contain non-utf-8 bytes. An header might also occur multiple times."]],"mod":[["asset_graph",""],["combined",""],["conditional",""],["lazy_instatiated",""],["query",""],["router",""],["specificity",""],["static_assets",""]],"struct":[["Body","A request body."],["BodyVc","Vc for [`Body`]"],["Bytes","A wrapper around [hyper::body::Bytes] that implements [Serialize] and [Deserialize]."],["ContentSourceContentVc","Vc for [`ContentSourceContent`]"],["ContentSourceData","Additional info passed to the ContentSource. It was extracted from the http request."],["ContentSourceDataVary","Describes additional information that need to be sent to requests to ContentSource. By sending these information ContentSource responses are cached-keyed by them and they can access them."],["ContentSourceDataVaryVc","Vc for [`ContentSourceDataVary`]"],["ContentSourceDataVc","Vc for [`ContentSourceData`]"],["ContentSourceResult","The return value of a content source when getting a path. A specificity is attached and when combining results this specificity should be used to order results."],["ContentSourceResultVc","Vc for [`ContentSourceResult`]"],["ContentSourceVc",""],["ContentSources",""],["ContentSourcesVc","Vc for [`ContentSources`]"],["NoContentSource","An empty ContentSource implementation that responds with NotFound for every request."],["NoContentSourceVc","Vc for [`NoContentSource`]"],["ProxyResult","The result of proxying a request to another HTTP server."],["ProxyResultVc","Vc for [`ProxyResult`]"]],"trait":[["ContentSource","A source of content that the dev server uses to respond to http requests."]],"type":[["BodyReadRef","see [turbo_tasks::ReadRef]"],["ContentSourceContentReadRef","see [turbo_tasks::ReadRef]"],["ContentSourceDataReadRef","see [turbo_tasks::ReadRef]"],["ContentSourceDataVaryReadRef","see [turbo_tasks::ReadRef]"],["ContentSourceResultReadRef","see [turbo_tasks::ReadRef]"],["ContentSourcesReadRef","see [turbo_tasks::ReadRef]"],["NoContentSourceReadRef","see [turbo_tasks::ReadRef]"],["ProxyResultReadRef","see [turbo_tasks::ReadRef]"]]};