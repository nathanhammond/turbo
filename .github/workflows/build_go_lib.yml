name: Build Go Library

env:
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Staging branch to run release from"

jobs:
  # smoke-test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         ref: ${{ inputs.release_branch }}
  #     - uses: ./.github/actions/setup-node
  #       with:
  #         enable-corepack: false
  #     - uses: ./.github/actions/setup-go
  #       with:
  #         github-token: "${{ secrets.GITHUB_TOKEN }}"
  #     - name: Test
  #       run: pnpm -- turbo run test --filter=cli --color

  # darwin:
  #   needs: [smoke-test]
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         ref: ${{ inputs.release_branch }}
  #     - run: git fetch origin --tags
  #     - uses: ./.github/actions/setup-node
  #       with:
  #         enable-corepack: false
  #     - uses: ./.github/actions/setup-go
  #       with:
  #         github-token: "${{ secrets.GITHUB_TOKEN }}"
  #     - name: Install GoReleaser
  #       uses: goreleaser/goreleaser-action@v3
  #       with:
  #         distribution: goreleaser-pro
  #         version: latest
  #         install-only: true
  #       env:
  #         GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
  #     - name: Build Artifacts
  #       run: cd cli && make build-lib-turbo-darwin
  #       env:
  #         GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
  #     - name: Upload Artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: turbo-lib-darwin-${{ inputs.release_branch }}
  #         path: cli/dist-darwin

  alpine:
    # needs: [smoke-test]
    runs-on: ubuntu-latest
    container: node:alpine
    steps:
      - run: apk add git go
      - run: git config --global --add safe.directory /__w/turbo/turbo
      - uses: actions/checkout@v3
        with:
          ref: "${{ inputs.release_branch }}"
      - run: git fetch origin --tags
      - name: Set Up Protoc
        id: set-up-protoc
        uses: arduino/setup-protoc@v1
        with:
          version: "3.x"
          repo-token: ${{ inputs.github-token }}
      - name: Set Up GRPC protobuf
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28.0
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2.0

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser-pro
          version: latest
          install-only: true
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
      - name: Build Artifacts
        run: cd cli && make build-lib-turbo-alpine
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: turbo-lib-alpine-${{ inputs.release_branch }}
          path: cli/dist-alpine

  # compiles linux and windows in a container
  # cross:
  #   needs: [smoke-test]
  #   runs-on: ubuntu-latest
  #   container:
  #     image: docker://ghcr.io/vercel/turbo-cross:v1.18.5
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         ref: "${{ inputs.release_branch }}"
  #     - run: git fetch origin --tags
  #     - uses: ./.github/actions/setup-node
  #       with:
  #         enable-corepack: false
  #     - uses: ./.github/actions/setup-go
  #       with:
  #         github-token: "${{ secrets.GITHUB_TOKEN }}"
  #     - name: Install GoReleaser
  #       uses: goreleaser/goreleaser-action@v3
  #       with:
  #         distribution: goreleaser-pro
  #         version: latest
  #         install-only: true
  #       env:
  #         GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
  #     - name: Build Artifacts
  #       run: cd cli && make build-lib-turbo-cross
  #       env:
  #         GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
  #     - name: Upload Artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: turbo-lib-cross-${{ inputs.release_branch }}
  #         path: cli/dist-cross
