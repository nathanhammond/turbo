name: Build Rust Wrapper

on:
  workflow_dispatch:

jobs:
  build-native:
    name: "Build Native"
    strategy:
      fail-fast: false
      matrix:
        settings:
          # - host: macos-latest
          #   target: "x86_64-apple-darwin"
          #   lib-cache-key: turbo-lib-darwin
          # - host: macos-latest
          #   target: "aarch64-apple-darwin"
          #   lib-cache-key: turbo-lib-darwin
          - host: ubuntu-latest
            target: "x86_64-unknown-linux-gnu"
            lib-cache-key: turbo-lib-cross
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
          - host: ubuntu-latest
            target: "aarch64-unknown-linux-gnu"
            lib-cache-key: turbo-lib-cross
            #docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            rustflags: 'RUSTFLAGS="-C linker=aarch64-linux-gnu-gcc"'
            #setup: "rustup target add aarch64-unknown-linux-gnu && export CC_aarch64_unknown_linux_gnu=/usr/aarch64-unknown-linux-gnu/bin/aarch64-unknown-linux-gnu-gcc && "
            setup: "sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu"
            # rustflags: 'RUSTFLAGS="-C linker=aarch64-linux-gnu-gcc"'
          # - host: windows-latest
          #   target: x86_64-pc-windows-gnu
          #   lib-cache-key: turbo-lib-cross
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3

      - name: Install
        uses: actions-rs/toolchain@v1
        if: ${{ !matrix.settings.docker }}
        with:
          profile: minimal
          override: true
          toolchain: nightly-2022-09-23
          #toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: ${{ matrix.settings.target }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.settings.target }}-cargo-registry

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ matrix.settings.target }}-cargo-index

      - name: Download artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          # Optional, workflow file name or ID
          # If not specified, will be inferred from run_id (if run_id is specified), or will be the current workflow
          workflow: build_go_lib.yml
          # Optional, the status or conclusion of a completed workflow to search for
          # Can be one of a workflow conclusion:
          #   "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required"
          # Or a workflow status:
          #   "completed", "in_progress", "queued"
          # Use the empty string ("") to ignore status or conclusion in the search
          workflow_conclusion: success
          # Optional, will use the specified branch. Defaults to all branches
          branch: main
          # Optional, uploaded artifact name,
          # will download all artifacts if not specified
          # and extract them into respective subdirectories
          # https://github.com/actions/download-artifact#download-all-artifacts
          name: ${{ matrix.settings.lib-cache-key }}
          # Optional, a directory where to extract artifact(s), defaults to the current directory
          path: shim/libturbo
          # Optional, choose how to exit the action if no artifact is found
          # can be one of:
          #  "fail", "warn", "ignore"
          # default fail
          if_no_artifact_found: fail

      # TODO: re-enable this instead of the above when this runs together with the go library build
      # - name: Download Cross-compiled Artifacts
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: ${{ matrix.settings.lib-cache-key }}
      #     path: shim/libturbo
      # - name: Build Setup
      #   if: ${{ matrix.settings.setup }}
      #   run: ${{ matrix.settings.setup }}

      - name: Build
        if: ${{ !matrix.settings.docker }}
        run: ${{ matrix.settings.setup }} cd shim && ${{ matrix.settings.rustflags }} cargo build --release --target ${{ matrix.settings.target }}

      - name: Build in Docker
        if: ${{ matrix.settings.docker }}
        run: ${{ matrix.settings.setup }} cd shim && ${{ matrix.settings.rustflags }} cargo build --release --target ${{ matrix.settings.target }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: shim-${{ matrix.settings.target }}
          path: shim/target
