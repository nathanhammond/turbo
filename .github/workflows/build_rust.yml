name: Build Rust Wrapper

on:
  workflow_dispatch:

jobs:
  build-native:
    name: "Build Native"
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: "x86_64-apple-darwin"
            lib-cache-key: turbo-lib-darwin
          - host: macos-latest
            target: "aarch64-apple-darwin"
            lib-cache-key: turbo-lib-darwin
            # build: |
            #   npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" && if [ ! -f $(dirname $(which yarn))/pnpm ]; then ln -s $(which yarn) $(dirname $(which yarn))/pnpm;fi
            #   turbo run build-native --cache-dir=".turbo" -- --release
            #   strip -x packages/next-swc/native/next-swc.*.node
          - host: ubuntu-latest
            target: "x86_64-unknown-linux-gnu"
            lib-cache-key: turbo-lib-cross
          - host: ubuntu-latest
            target: "aarch64-unknown-linux-gnu"
            lib-cache-key: turbo-lib-cross
            setup: |
              sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
            rustflags: 'RUSTFLAGS="-C linker=aarch64-linux-gnu-gcc"'
          - host: windows-latest
            target: x86_64-pc-windows-gnu
            lib-cache-key: turbo-lib-cross
            #docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            # build: >-
            #   set -e &&
            #   rustup toolchain install "${RUST_TOOLCHAIN}" &&
            #   rustup default "${RUST_TOOLCHAIN}" &&
            #   rustup target add x86_64-unknown-linux-gnu &&
            #   npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" && if [ ! -f $(dirname $(which yarn))/pnpm ]; then ln -s $(which yarn) $(dirname $(which yarn))/pnpm;fi &&
            #   turbo run build-native --cache-dir=".turbo" -- --release --target x86_64-unknown-linux-gnu &&
            #   strip packages/next-swc/native/next-swc.*.node
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3

      - name: Install
        uses: actions-rs/toolchain@v1
        if: ${{ !matrix.settings.docker }}
        with:
          profile: minimal
          override: true
          toolchain: nightly-2022-09-23
          #toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: ${{ matrix.settings.target }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.settings.target }}-cargo-registry

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ matrix.settings.target }}-cargo-index

      - name: Download artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          # Optional, workflow file name or ID
          # If not specified, will be inferred from run_id (if run_id is specified), or will be the current workflow
          workflow: build_go_lib.yml
          # Optional, the status or conclusion of a completed workflow to search for
          # Can be one of a workflow conclusion:
          #   "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required"
          # Or a workflow status:
          #   "completed", "in_progress", "queued"
          # Use the empty string ("") to ignore status or conclusion in the search
          workflow_conclusion: success
          # Optional, will get head commit SHA
          #pr: ${{github.event.pull_request.number}}
          # Optional, no need to specify if PR is
          #commit: ${{github.event.pull_request.head.sha}}
          # Optional, will use the specified branch. Defaults to all branches
          branch: main
          # Optional, defaults to all types
          #event: push
          # Optional, will use specified workflow run
          #run_id: 1122334455
          # Optional, run number from the workflow
          #run_number: 34
          # Optional, uploaded artifact name,
          # will download all artifacts if not specified
          # and extract them into respective subdirectories
          # https://github.com/actions/download-artifact#download-all-artifacts
          name: ${{ matrix.settings.lib-cache-key }}
          # Optional, a directory where to extract artifact(s), defaults to the current directory
          path: shim/libturbo
          # Optional, defaults to current repo
          #repo: ${{ github.repository }}
          # Optional, check the workflow run to whether it has an artifact
          # then will get the last available artifact from the previous workflow
          # default false, just try to download from the last one
          #check_artifacts:  false
          # Optional, search for the last workflow run whose stored an artifact named as in `name` input
          # default false
          #search_artifacts: false
          # Optional, choose to skip unpacking the downloaded artifact(s)
          # default false
          #skip_unpack: false
          # Optional, choose how to exit the action if no artifact is found
          # can be one of:
          #  "fail", "warn", "ignore"
          # default fail
          if_no_artifact_found: fail

      # - name: Download Cross-compiled Artifacts
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: ${{ matrix.settings.lib-cache-key }}
      #     path: shim/libturbo
      - name: Build Setup
        if: ${{ matrix.settings.setup }}
        run: ${{ matrix.settings.setup }}

      - name: Build
        run: cd shim && ${{ matrix.settings.rustflags }} cargo build --release --target ${{ matrix.settings.target }}
